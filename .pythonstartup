# Add Tab Completion and History File
# Source: http://witkowskibartosz.com/blog/pythonstartup_what_it_is_and_how_to_use_it.html#.X1DZsnaYWV4
import readline
import rlcompleter
import atexit
import os
readline.parse_and_bind('tab: complete') # tab completion
histfile = os.path.join(os.environ['HOME'], '.pythonhistory') # history file
try:   readline.read_history_file(histfile)
except IOError: pass
atexit.register(readline.write_history_file, histfile)
del os, histfile, readline, rlcompleter

# Import commonly used modules
import importlib
import importlib.util
for module in [
    "argparse",
    "atexit",
    "base64",
    "codecs",
    "contextlib",
    "functools",
    "gc",
    "glob",
    "gzip",
    "humanize",
    "inspect",
    "itertools",
    "joblib",
    "json5",
    "json",
    "math",
    "multiprocessing",
    "os",
    "pickle",
    "pytest",
    "random",
    "re",
    "signal",
    "simplejson",
    "string",
    "sys",
    "time",
    "timeit",
    "torch",
    "traceback",
    "xxhash",
    "zlib",
]:
    if importlib.util.find_spec(module):
        try:   importlib.import_module(module); print(f'import {module}')
        except ModuleNotFoundError: pass

from collections import *; print("from collections import *")
from copy import copy, deepcopy; print("from copy import copy, deepcopy")
from dataclasses import dataclass; print("from dataclasses import dataclass")
from enum import Enum; print("from enum import Enum")
from itertools import accumulate, chain, combinations, combinations_with_replacement, compress, count, cycle, dropwhile; print("from itertools import accumulate, chain, combinations, combinations_with_replacement, compress, count, cycle, dropwhile")
from itertools import filterfalse, groupby, islice, permutations, product, repeat, starmap, takewhile, tee, zip_longest; print("from itertools import filterfalse, groupby, islice, permutations, product, repeat, starmap, takewhile, tee, zip_longest")
from operator import itemgetter; print("from operator import itemgetter")
from struct import Struct; print("from struct import Struct")
from typing import *; print("from typing import *")

try:    import numpy as np; print("import numpy as np")
except: pass
try:    import pandas as pd; print("import pandas as pd")
except: pass
try:    from fastcache import clru_cache; print("from fastcache import clru_cache")
except: pass
